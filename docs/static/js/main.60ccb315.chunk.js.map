{"version":3,"sources":["Web3Util.js","LotteryHome.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["getInstance","web3","a","eth","net","getId","networkId","getAccounts","window","user","deployedNetwork","LotteryContract","networks","instance","Contract","abi","address","from","sectionStyle","width","minHeight","paddingBottom","backgroundSize","backgroundAttachment","LotteryHome","props","componentDidMount","Promise","resolve","reject","ethereum","Web3","enable","console","log","process","provider","providers","HttpProvider","contractInstance","setState","LoadData","state","hasData","message","bind","joinRaffle","this","methods","getWinners","call","winners","getPlayers","players","priceInWei","utils","toWei","cost","enter","send","gas","value","location","reload","addresses","divs","counter","length","customColor","isMe","color","fontWeight","push","style","className","maxParticipants","addressesToDivs","onClick","React","Component","Routes","path","component","render","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60ccb315.chunk.js","sourcesContent":["import Web3 from 'web3';\r\nimport LotteryContract from './abi/Lottery.json'\r\n\r\nexport const getWeb3 = () =>\r\n    new Promise(async(resolve, reject) => {\r\n    //window.addEventListener(\"load\", async () => {\r\n    if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n        await window.ethereum.enable();\r\n        resolve(web3);\r\n        } catch (error) {\r\n        reject(error);\r\n        }\r\n    } else if (window.web3) {\r\n        // load metamask provider\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n    } else {\r\n        console.log(process.env.PUBLIC_URL)\r\n        const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:7545\");\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n    }\r\n    //});\r\n});\r\nexport const getInstance = async (web3) => {\r\n    const networkId = await web3.eth.net.getId();\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    const deployedNetwork = LotteryContract.networks[networkId];\r\n    \r\n    window.instance = new web3.eth.Contract(\r\n        LotteryContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n        {\r\n            from: window.user\r\n        }\r\n    );\r\n    return window.instance;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { getWeb3, getInstance}  from \"./Web3Util\";\r\n\r\n\r\nvar sectionStyle = {\r\n  width: \"100vw\",\r\n  minHeight:\"110vh\",\r\n  paddingBottom:\"150px\",\r\n  backgroundSize: 'cover',\r\n\r\n    backgroundAttachment: 'fixed'\r\n};\r\n\r\nclass LotteryHome extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasData: false,\r\n      message: \"\",\r\n      user: '',\r\n      contractInstance: '',\r\n      user:'',\r\n      winners:[],\r\n      players:[],\r\n      cost:\"3\",\r\n      maxParticipants:\"4\"\r\n    };\r\n    this.LoadData = this.LoadData.bind(this);\r\n    this.joinRaffle = this.joinRaffle.bind(this);\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    const web3 = await getWeb3();\r\n    window.web3 = web3;\r\n    const contractInstance = await getInstance(web3);\r\n    window.user = (await web3.eth.getAccounts())[0];\r\n    this.setState({ user: window.user });\r\n    this.setState({ contractInstance: contractInstance });\r\n    await this.LoadData(web3);\r\n\r\n  }\r\n  async LoadData() {\r\n      try {\r\n       const winners = await this.state.contractInstance.methods.getWinners().call();\r\n       const players = await this.state.contractInstance.methods.getPlayers().call();\r\n        this.setState({\r\n          hasData:true,winners,players\r\n        })\r\n    } catch (e) {console.log('Error', e)}\r\n  \r\n  }\r\n  async joinRaffle() {\r\n    try {\r\n     const priceInWei =  window.web3.utils.toWei(this.state.cost, 'ether');\r\n      await this.state.contractInstance.methods.enter().send({\r\n           gas: 210000, value:priceInWei\r\n      })\r\n      window.location.reload(); \r\n    } catch (e) {console.log('Error', e)}\r\n  };\r\n\r\n\r\n   addressesToDivs(addresses){\r\n    let divs=[]\r\n\r\n    for(let counter=0;counter<addresses.length;++counter){\r\n\r\n      let customColor={}\r\n      let isMe=  false;\r\n      if(addresses[counter] == this.state.user){\r\n        customColor={color:\"green\",fontWeight:\"bold\"}\r\n        isMe = true\r\n      }\r\n\r\n      divs.push(\r\n\r\n        <div style={customColor}>\r\n          {addresses[counter]} {isMe?<span>(me!)</span>:null}<br/>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n    return divs\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasData) {\r\n      return (\r\n        <div className=\"App\"  style={sectionStyle} >\r\n          <section className=\"text-center\">\r\n            <div className=\"container\">\r\n              <div>\r\n              My address: {this.state.user}\r\n              <br/>\r\n              <br/>\r\n\r\n                <br/>\r\n                Bet price: {this.state.cost} AVAX <br/>\r\n                Bets to win: {this.state.players.length}/{this.state.maxParticipants} <br/>\r\n                Participants: {this.addressesToDivs(this.state.players)}\r\n                <br />\r\n                <a onClick={this.joinRaffle} style={{color:\"green\"}}>Join raffle</a>\r\n                <br />\r\n                <br />\r\n                <br />\r\n                Winner counter:{this.state.winners.length}\r\n                <br />\r\n                Winners: {this.addressesToDivs(this.state.winners)}\r\n\r\n              </div>\r\n              </div>\r\n          </section>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\" style={sectionStyle} >\r\n          <section className=\"text-center\">\r\n            Not connected\r\n          </section>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default LotteryHome;\r\n","import React from \"react\";\r\nimport {  Route, Switch,HashRouter} from \"react-router-dom\";\r\n\r\nimport LotteryHome from './LotteryHome';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <HashRouter>\r\n      <Switch>\r\n        <Route  path=\"/\" component={LotteryHome} />\r\n        <Route  path=\"/dex\" component={LotteryHome} />\r\n\r\n      <Route\r\n        render={function() {\r\n          return <h1>Not Found</h1>;\r\n        }}\r\n      />\r\n    </Switch></HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Routes;\r\n","import React from \"../node_modules/react\";\r\nimport \"./App.css\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter as Router } from \"../node_modules/react-router-dom\";\r\nimport Routes from \"./Routes\";\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n     \r\n\r\n      <Router>\r\n      <div>\r\n        <main>\r\n        <Routes />\r\n        </main>\r\n      </div>\r\n      </Router>\r\n    \r\n\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}